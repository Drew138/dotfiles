// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Provisioner is an autogenerated mock type for the Provisioner type
type Provisioner struct {
	mock.Mock
}

type Provisioner_Expecter struct {
	mock *mock.Mock
}

func (_m *Provisioner) EXPECT() *Provisioner_Expecter {
	return &Provisioner_Expecter{mock: &_m.Mock}
}

// Pull provides a mock function with given fields: roles, debug
func (_m *Provisioner) Pull(roles []string, debug bool) error {
	ret := _m.Called(roles, debug)

	if len(ret) == 0 {
		panic("no return value specified for Pull")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, bool) error); ok {
		r0 = rf(roles, debug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Provisioner_Pull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pull'
type Provisioner_Pull_Call struct {
	*mock.Call
}

// Pull is a helper method to define mock.On call
//   - roles []string
//   - debug bool
func (_e *Provisioner_Expecter) Pull(roles interface{}, debug interface{}) *Provisioner_Pull_Call {
	return &Provisioner_Pull_Call{Call: _e.mock.On("Pull", roles, debug)}
}

func (_c *Provisioner_Pull_Call) Run(run func(roles []string, debug bool)) *Provisioner_Pull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(bool))
	})
	return _c
}

func (_c *Provisioner_Pull_Call) Return(_a0 error) *Provisioner_Pull_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provisioner_Pull_Call) RunAndReturn(run func([]string, bool) error) *Provisioner_Pull_Call {
	_c.Call.Return(run)
	return _c
}

// NewProvisioner creates a new instance of Provisioner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvisioner(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provisioner {
	mock := &Provisioner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
