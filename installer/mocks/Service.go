// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// GetRoles provides a mock function with given fields:
func (_m *Service) GetRoles() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRoles")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoles'
type Service_GetRoles_Call struct {
	*mock.Call
}

// GetRoles is a helper method to define mock.On call
func (_e *Service_Expecter) GetRoles() *Service_GetRoles_Call {
	return &Service_GetRoles_Call{Call: _e.mock.On("GetRoles")}
}

func (_c *Service_GetRoles_Call) Run(run func()) *Service_GetRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Service_GetRoles_Call) Return(_a0 []string, _a1 error) *Service_GetRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetRoles_Call) RunAndReturn(run func() ([]string, error)) *Service_GetRoles_Call {
	_c.Call.Return(run)
	return _c
}

// Pull provides a mock function with given fields: roles, debug
func (_m *Service) Pull(roles []string, debug bool) error {
	ret := _m.Called(roles, debug)

	if len(ret) == 0 {
		panic("no return value specified for Pull")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, bool) error); ok {
		r0 = rf(roles, debug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_Pull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pull'
type Service_Pull_Call struct {
	*mock.Call
}

// Pull is a helper method to define mock.On call
//   - roles []string
//   - debug bool
func (_e *Service_Expecter) Pull(roles interface{}, debug interface{}) *Service_Pull_Call {
	return &Service_Pull_Call{Call: _e.mock.On("Pull", roles, debug)}
}

func (_c *Service_Pull_Call) Run(run func(roles []string, debug bool)) *Service_Pull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(bool))
	})
	return _c
}

func (_c *Service_Pull_Call) Return(_a0 error) *Service_Pull_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_Pull_Call) RunAndReturn(run func([]string, bool) error) *Service_Pull_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
