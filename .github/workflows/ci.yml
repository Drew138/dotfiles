---
name: ci

"on":
  push:
  schedule:
    - cron: "0 7 * * 0"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: check out the codebase
        uses: actions/checkout@v4

      - name: set up python 3
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: install test dependencies.
        run: pip3 install yamllint

      - name: lint code
        run: |
          yamllint .

  check-roles:
    needs: lint
    runs-on: ubuntu-latest
    outputs:
      roles: ${{ steps.roles.outputs.roles }}
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: install jq
        run: sudo apt-get install jq

      - name: list ansible roles
        id: roles
        run: |
          echo 'roles<<EOF' >> "${GITHUB_OUTPUT}"
          roles=$(ls -1 -d */ | sed 's:/$::' | jq -R -s 'split("\n")[:-1]')
          echo $roles>> "${GITHUB_OUTPUT}"
          echo 'EOF' >> "${GITHUB_OUTPUT}"
        working-directory: ./roles/

  test-macos:
    needs: check-roles
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        role: ${{ fromJson(needs.check-roles.outputs.roles) }}
    steps:
      - name: check out the codebase
        uses: actions/checkout@v4

      - name: set up python 3
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: uninstall various programs
        run: |
          rm -rf /usr/local/go
          rm -rf ~/go
          rm -rf ~/.cargo
          rm -rf ~/.nvm
          rm -rf ~/go
          rm -rf ~/.go
          sudo rm -rf /opt/homebrew/bin/cpack
          sudo rm -rf /opt/homebrew/bin/ctest
          sudo rm -rf /opt/homebrew/bin/ccmake
          sudo rm -rf /opt/homebrew/bin/cmake

      - name: install test dependencies
        run: pip3 install \
          ansible \
          molecule

      - name: create password file
        run: echo ${{ secrets.ANSIBLE_VAULT_PASSWORD }} > ./molecule/default/vaultpassword

      - name: create ~/extra_vars.yml file
        run: >
          echo "selected_hosts: localhost" > ~/extra_vars.yml

      - name: run molecule tests
        run: molecule test
        env:
          ROOT_DIR: ${{ github.workspace }}
          PY_COLORS: "1"
          ANSIBLE_FORCE_COLOR: "1"
          ANSIBLE_VAULT_PASSWORD_FILE: $HOME/vaultpassword
          MOLECULE_ROLE: ${{ matrix.role }}
          GHUB_ACCESS_TOKEN: ${{ secrets.GHUB_ACCESS_TOKEN }}

  test-ubuntu:
    needs: check-roles
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        role: ${{ fromJson(needs.check-roles.outputs.roles) }}
    steps:
      - name: check out the codebase
        uses: actions/checkout@v4

      - name: set up python 3
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: uninstall various programs
        run: |
          rm -rf /usr/local/go
          rm -rf ~/go
          rm -rf ~/.cargo
          rm -rf ~/.nvm
          rm -rf ~/go
          rm -rf ~/.go

      - name: install test dependencies
        run: pip3 install \
          ansible \
          molecule

      - name: create password file
        run: echo ${{ secrets.ANSIBLE_VAULT_PASSWORD }} > $HOME/vaultpassword

      - name: create ~/extra_vars.yml file
        run: >
          echo "selected_hosts: localhost" > ~/extra_vars.yml

      - name: run molecule tests
        run: molecule test
        env:
          ROOT_DIR: ${{ github.workspace }}
          PY_COLORS: "1"
          ANSIBLE_FORCE_COLOR: "1"
          ANSIBLE_VAULT_PASSWORD_FILE: $HOME/vaultpassword
          MOLECULE_ROLE: ${{ matrix.role }}
          GHUB_ACCESS_TOKEN: ${{ secrets.GHUB_ACCESS_TOKEN }}

  notify-errors:
    needs: [test-macos, test-ubuntu]
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && (needs.test-ubuntu.result == 'failure' || needs.test-macos.result == 'failure')
    steps:
      - name: send mail
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: Dotfiles Error
          to: ${{ secrets.EMAIL }}
          from: ${{ secrets.EMAIL }}
          body: dotfiles test failed, check needed
